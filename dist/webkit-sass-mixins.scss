/*enactive Start*/
@mixin enactive($inBgColor) {
  &:active {
    background: $inBgColor;
  }
}
/*enactive End*/

/*enlarge Start*/
@mixin enlarge($inValue) {
  &:after {
    content: '';
    display: block;
    position: absolute;
    left: -$inValue;
    top: -$inValue;
    bottom: -$inValue;
    right: -$inValue;
  }
}
/*enlarge End*/

/*flip Start*/
@mixin flip($inValue) {
  @if $inValue =='x' {
    -moz-transform: scaleX(-1);
    -o-transform: scaleX(-1);
    -webkit-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
    -ms-filter:  "FlipH";
  } @else {
    -moz-transform: scaleY(-1);
    -o-transform: scaleY(-1);
    -webkit-transform: scaleY(-1);
    transform: scaleY(-1);
    filter: FlipV;
    -ms-filter:  "FlipV";
  }
}
/*flip End*/

/*grid Start*/
@mixin dib-row () {
  font-size: 0;
}
// This is column mixins.
@mixin dib-col ($col, $sum, $gap: 1em, $align: top, $first: false, $last: false) {
  width: 100%;
  display: inline-block;
  font-size: 16px;
  padding-left: if($first, 0, $gap);
  padding-right: if($last, 0, $gap);
  width: percentage($col/$sum);
  vertical-align: $align;
}
/*grid End*/

/*height Start*/
@mixin hlh($inValue){
  height: $inValue;
  line-height: $inValue;
}
/*height End*/

/*justify-list Start*/
@mixin justify-list($inWidth,$inLength,$inGap,$inItemPrefix:'.item') {
  $item-widths: $inWidth - ($inLength - 1)*$inGap;
  $item-width:$item-widths / $inLength;
  $inner-width:$inWidth+2*$inGap;
  width:$inWidth;
  overflow: hidden;

  >.inner{
    width:$inner-width;
    margin-left: -$inGap;
    > #{$inItemPrefix} {
      width: $item-width;
      margin-left: $inGap;
      float: left;
    }
  }
}
/*justify-list End*/

/*layoyt-tmb Start*/
.layout-tmb{
  position: relative;
  > * {
    position: absolute;
    width: 100%;
  }
  >.hd {
    top: 0;
  }
  >.ft {
    bottom: 0;
  }
}
@mixin layout-tmb($inHdHeight,$inFtHeight:0) {
  >.hd {
    height:$inHdHeight;
  }

  >.bd {
    top:$inHdHeight;
    bottom:$inFtHeight;
  }
  >.ft {
    height: $inFtHeight;
  }
}
/*layoyt-tmb End*/

/*margin Start*/
@mixin mt($inValue){
  margin-top: $inValue;
}
@mixin mr($inValue){
  margin-right: $inValue;
}
@mixin mb($inValue){
  margin-bottom: $inValue;
}
@mixin ml($inValue){
  margin-left: $inValue;
}
@mixin m($inValue){
  margin: $inValue;
}
@mixin mx($inValue){
  margin-left: $inValue;
  margin-right: $inValue;
}
@mixin my($inValue){
  margin-top: $inValue;
  margin-bottom: $inValue;
}
/*margin End*/

/*padding Start*/
@mixin pt($inValue){
  padding-top: $inValue;
}
@mixin pr($inValue){
  padding-right: $inValue;
}
@mixin pb($inValue){
  padding-bottom: $inValue;
}
@mixin pl($inValue){
  padding-left: $inValue;
}
@mixin p($inValue){
  padding: $inValue;
}
@mixin px($inValue){
  padding-left: $inValue;
  padding-right: $inValue;
}
@mixin py($inValue){
  padding-top: $inValue;
  padding-bottom: $inValue;
}
/*padding End*/

/*size Start*/
@mixin size($inWidth,$inHeight:'') {
  @if $inHeight != '' {
    width:$inWidth;
    height:$inHeight;
  } @else {
    width:$inWidth;
    height:$inWidth;
  }
}
/*size End*/

/*text Start*/
@mixin text-overflow($inWidth,$inHeight) {
  max-width: $inWidth;
  height: $inHeight;
  white-space: nowrap;
  text-overflow: ellipsis;
  vertical-align: middle;
  overflow: hidden;
}
/*text End*/

/**
 * @desc  triangle
 * @param $width
 * @param $height
 * @param $color
 * @param $direction: top bottom left right
 */
@mixin triangle($width, $height, $color: #000, $direction: bottom) {
    $map-direction: (
        top: bottom left right,
        bottom: top left right,
        left: right top bottom,
        right: left top bottom
    );
    @if not map-has-key($map-direction, $direction) {
        @error "triangle $direction Must be:#{map-keys($map-direction)}";
    }
    $conf: map-get($map-direction, $direction);
    $width: $width/2;

    height: 0;
    width: 0;
    border-#{nth($conf, 1)}: $height solid $color;
    border-#{nth($conf, 2)}: $width solid transparent;
    border-#{nth($conf, 3)}: $width solid transparent;
}


/**
 * @desc Use svg
 */
@mixin svg-triangle($width, $height, $color: #000, $direction: bottom) {
    $map-direction: (
        top: 0,
        bottom: 180 strip-unit($width) strip-unit($height),
        left: -90 strip-unit($height) strip-unit($height),
        right: 90 strip-unit($width) strip-unit($width)
    );
    @if not map-has-key($map-direction, $direction) {
        @error "svg-triangle $direction 必须为：#{map-keys($map-direction)}";
    }
    $degrees: map-get($map-direction, $direction);

    width: $width;
    height: $height;
    background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http://www.w3.org/2000/svg%22%20width%3D%22#{$width * 2}%22%20height%3D%22#{$height * 2}%22%3E%3Cpath%20fill%3D%22#{$color}%22%20transform%3D%22rotate(#{$degrees})%22%20d%3D%22M2.658,0.000%20C-13.615,0.000%2050.938,0.000%2034.662,0.000%20C28.662,0.000%2023.035,12.002%2018.660,12.002%20C14.285,12.002%208.594,0.000%202.658,0.000%20Z%22/%3E%3C/svg%3E');
    background-repeat: no-repeat;
    background-size: 100% auto;
}

/*width Start*/
@mixin w1($inNumber){
  width: #{100/$inNumber+'%'};
}
/*width End*/

/*text-overflow Start*/
@mixin text-overflow($inHeight,$inWidth) {
  white-space: nowrap;
  text-overflow: ellipsis;
  vertical-align: middle;
  overflow: hidden;
}
@mixin line-clamp($inLine) {
  overflow : hidden;
  text-overflow: ellipsis;
  display:flex;
  display: -webkit-box;
  -webkit-line-clamp: $inLine;
  -webkit-box-orient: vertical;
}
/*text-overflow End*/
