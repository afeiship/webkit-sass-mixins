/*!
 * name: @jswork/wsui-mixins
 * description: Webkit sass mixins.
 * homepage: https://github.com/afeiship/wsui-mixins
 * version: 1.0.0
 * date: 2020-11-28 17:57:26
 * license: MIT
 */

/*animation Start*/
@mixin animation($animation) {
 -webkit-animation: $animation;
         animation: $animation;
}
@mixin animation-duration($duration) {
 -webkit-animation-duration: $duration;
         animation-duration: $duration;
}
@mixin animation-direction($direction) {
 -webkit-animation-direction: $direction;
         animation-direction: $direction;
}
@mixin animation-timing-function($animation-timing) {
 -webkit-animation-timing-function: $animation-timing;
         animation-timing-function: $animation-timing;
}
@mixin animation-fill-mode($fill-mode) {
 -webkit-animation-fill-mode: $fill-mode;
         animation-fill-mode: $fill-mode;
}
@mixin animation-name($name...) {
 -webkit-animation-name: $name;
         animation-name: $name;
}
@mixin animation-iteration-count($count) {
 -webkit-animation-iteration-count: $count;
         animation-iteration-count: $count;
}
/*animation End*/

/*appearance Start*/
@mixin appearance($val) {
  -webkit-appearance: $val;
     -moz-appearance: $val;
          appearance: $val;
}
/*appearance End*/

/*backface-visibility Start*/
@mixin backface-visibility($visibility){
  -webkit-backface-visibility: $visibility;
          backface-visibility: $visibility;
}
/*backface-visibility End*/

/*background Start*/
// Background clipping
// --------------------------------------------------

@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
          background-clip: $clip;
}


// Background sizing
// --------------------------------------------------

@mixin background-size($size) {
  -webkit-background-size: $size;
          background-size: $size;
}
/*background End*/

/*border-radius Start*/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
          border-radius: $radius;
}

// Single Corner Border Radius
@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
          border-top-left-radius: $radius;
}
@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
          border-top-right-radius: $radius;
}
@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
          border-bottom-right-radius: $radius;
}
@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
          border-bottom-left-radius: $radius;
}

// Single Side Border Radius
@mixin border-top-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-top-left-radius($radius);
}
@mixin border-right-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius);
}
@mixin border-bottom-radius($radius) {
  @include border-bottom-right-radius($radius);
  @include border-bottom-left-radius($radius);
}
@mixin border-left-radius($radius) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius);
}
/*border-radius End*/

/*box-shadow Start*/
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
          box-shadow: $shadow;
}
/*box-shadow End*/

/*box-sizing Start*/
// Box sizing
// --------------------------------------------------

@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}
/*box-sizing End*/

//https://h5.m.taobao.com/mlapp/mytaobao.html#mlapp-mytaobao
//https://www.zhihu.com/question/22991944
@mixin box-flex($n:1) {
  -webkit-box-flex: $n;
  -moz-box-flex: $n;
  -ms-box-flex: $n;
  -o-box-flex: $n;
  box-flex: $n;
}
@mixin box-pack($value:center) {
  -webkit-box-pack: $value;
  -moz-box-pack: $value;
  -ms-box-pack: $value;
  -o-box-pack: $value;
  box-pack: $value;
}
@mixin box-align($value:center) {
  -webkit-box-align: $value;
  -moz-box-align: $value;
  -ms-box-align: $value;
  -o-box-align: $value;
  box-align: $value;
}
@mixin display-box {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
}

//horizontal
// vertical
// inline-axis
// block-axis
// inherit
@mixin box-orient($value:horizontal) {
  -moz-box-orient:$value;
  -webkit-box-orient:$value;
  o-box-orient:$value;
  o-ms-orient:$value;
  box-orient:$value;
}

/*clearfix Start*/
@mixin clearfix {
  // *zoom: 1;
  &:after,
  &:before {
    display: table;
    content: "";
    // line-height: 0;
  }

  &:after {
    clear: both;
  }
}

@mixin mini-clearfix {
  &:after {
    clear: both;
    content: "\200B";
    display: block;
    height: 0;
  }
}
/*clearfix End*/

/*content-columns Start*/
@mixin content-columns($columnCount, $columnGap) {
  -webkit-column-count: $columnCount;
     -moz-column-count: $columnCount;
          column-count: $columnCount;
  -webkit-column-gap: $columnGap;
     -moz-column-gap: $columnGap;
          column-gap: $columnGap;
}
/*content-columns End*/

/*dib-grid Start*/
@mixin dib-row () {
  font-size: 0;
}
// This is column mixins.
@mixin dib-col ($col, $sum, $gap: 1em, $align: top, $first: false, $last: false) {
  width: 100%;
  display: inline-block;
  font-size: 16px;
  padding-left: if($first, 0, $gap);
  padding-right: if($last, 0, $gap);
  width: percentage($col/$sum);
  vertical-align: $align;
}
/*dib-grid End*/

@mixin enlarge($distance: -10px ,$position: absolute) {
  &:after{
    position: $position;
    content:'\200B';
    top: $distance;
    right: $distance;
    bottom: $distance;
    left: $distance;
  }
}

/*filter Start*/
@mixin filter-blur($inValue:3px) {
  -webkit-filter: blur($inValue);
  -moz-filter: blur($inValue);
  -ms-filter: blur($inValue);
  filter: blur($inValue);
}
/*filter End*/

/*grid Start*/
@mixin flexbox-grid-item($inGridPrefix, $inKey, $inValue, $inGridCount){
  $percent: percentage($inValue/$inGridCount);
  $prefix: #{$inGridPrefix}-#{$inKey};

  @if $inKey == '' {
    $prefix: $inGridPrefix;
  }

  #{$prefix}-#{$inValue}{
    @include flex(0, 0, $percent);
    width: $percent;
  }

  #{$prefix}-offset-#{$inValue}{
    margin-left: $percent;
  }
}

// @include grid-item('.grid', 'u', 3, 24);
// @include grid-item('.grid', '', 3, 24);

@mixin flexbox-grid($inGridPrefix:'.col', $inGridCount:24, $inKey:'u', $inMinWidth: auto){
  @if $inMinWidth != auto{
    @media screen and (min-width: $inMinWidth) {
      @for $value from 1 through $inGridCount {
        @include flexbox-grid-item($inGridPrefix, $inKey, $value, $inGridCount);
      }
    }
  } @else{
    @for $value from 1 through $inGridCount {
      @include flexbox-grid-item($inGridPrefix, $inKey, $value, $inGridCount);
    }
  }
}

// @include grid('.grid', 24,'u');
// @include grid('.grid', 24,'');
/*grid End*/

/*flexbox Start*/
// Flexbox Mixins
// --------------------------------------------------
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox

@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
      -ms-flex-wrap: none;
  } @else {
      -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  -webkit-box-flex: $fg;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin justify-content($value: stretch) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin flex-order($n) {
  -webkit-order: $n;
  -ms-flex-order: $n;
  order: $n;
  -webkit-box-ordinal-group: $n;
}

@mixin responsive-grid-break($selector, $max-width) {
  @media (max-width: $max-width) {
    #{$selector} {
      -webkit-box-direction: normal;
      -moz-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-orient: vertical;
      -webkit-flex-direction: column;
      -ms-flex-direction: column;
      flex-direction: column;

      .col, .col-10, .col-20, .col-25, .col-30, .col-33, .col-34, .col-50, .col-66, .col-67, .col-70, .col-75, .col-80, .col-90 {
        @include flex(1);
        margin-bottom: ($grid-padding-width * 3) / 2;
        margin-left: 0;
        max-width: 100%;
        width: 100%;
      }
    }
  }
}
/*flexbox End*/

/*flip Start*/
@mixin flip($inValue) {
  @if $inValue =='x' {
    -moz-transform: scaleX(-1);
    -o-transform: scaleX(-1);
    -webkit-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
    -ms-filter:  "FlipH";
  } @else {
    -moz-transform: scaleY(-1);
    -o-transform: scaleY(-1);
    -webkit-transform: scaleY(-1);
    transform: scaleY(-1);
    filter: FlipV;
    -ms-filter:  "FlipV";
  }
}
/*flip End*/

/*grid Start*/
@mixin grid-item($inGridPrefix, $inKey, $inValue, $inGridCount){
  $percent: percentage($inValue/$inGridCount);
  $prefix: #{$inGridPrefix}-#{$inKey};

  @if $inKey == '' {
    $prefix: $inGridPrefix;
  }

  #{$prefix}-#{$inValue}{
    width: $percent;
  }

  #{$prefix}-offset-#{$inValue}{
    margin-left: $percent;
  }
}

// @include grid-item('.grid', 'u', 3, 24);
// @include grid-item('.grid', '', 3, 24);

@mixin grid($inGridPrefix:'.col', $inGridCount:24, $inKey:'u', $inMinWidth: auto){
  @if $inMinWidth != auto{
    @media screen and (min-width: $inMinWidth) {
      @for $value from 1 through $inGridCount {
        @include grid-item($inGridPrefix, $inKey, $value, $inGridCount);
      }
    }
  } @else{
    @for $value from 1 through $inGridCount {
      @include grid-item($inGridPrefix, $inKey, $value, $inGridCount);
    }
  }
}

// @include grid('.grid', 24,'u');
// @include grid('.grid', 24,'');
/*grid End*/

/*height Start*/
@mixin hlh($inValue){
  height: $inValue;
  line-height: $inValue;
}

@mixin box-whlh-center($inValue){
  width: $inValue;
  height: $inValue;
  line-height: $inValue;
  text-align: center;
}
/*height End*/

/*margin Start*/
@mixin mt($inValue){
  margin-top: $inValue;
}
@mixin mr($inValue){
  margin-right: $inValue;
}
@mixin mb($inValue){
  margin-bottom: $inValue;
}
@mixin ml($inValue){
  margin-left: $inValue;
}
@mixin m($inValue){
  margin: $inValue;
}
@mixin mx($inValue){
  margin-left: $inValue;
  margin-right: $inValue;
}
@mixin my($inValue){
  margin-top: $inValue;
  margin-bottom: $inValue;
}
/*margin End*/

/*padding Start*/
@mixin pt($inValue){
  padding-top: $inValue;
}
@mixin pr($inValue){
  padding-right: $inValue;
}
@mixin pb($inValue){
  padding-bottom: $inValue;
}
@mixin pl($inValue){
  padding-left: $inValue;
}
@mixin p($inValue){
  padding: $inValue;
}
@mixin px($inValue){
  padding-left: $inValue;
  padding-right: $inValue;
}
@mixin py($inValue){
  padding-top: $inValue;
  padding-bottom: $inValue;
}
/*padding End*/

/*placeholder Start*/
@mixin placeholder($color, $text-indent: 0) {
  &::-moz-placeholder { // Firefox 19+
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
    // Safari placeholder margin issue
    text-indent: $text-indent;
  }
}
/*placeholder End*/

/*size Start*/
@mixin size($inWidth,$inHeight:'') {
  @if $inHeight != '' {
    width:$inWidth;
    height:$inHeight;
  } @else {
    width:$inWidth;
    height:$inWidth;
  }
}
/*size End*/

/*square Start*/
@mixin square($inSize) {
  text-align: center;
  line-height: $inSize;
  width:$inSize;
  height:$inSize;
}
/*square End*/

/*tap-highlight-transparent Start*/
@mixin tap-highlight-transparent() {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-tap-highlight-color: transparent; // For some Androids
}
/*tap-highlight-transparent End*/

/*text-size-adjust Start*/
@mixin text-size-adjust($value: none) {
  -webkit-text-size-adjust: $value;
     -moz-text-size-adjust: $value;
          text-size-adjust: $value;
}
/*text-size-adjust End*/

/*touch-callout Start*/
@mixin touch-callout($value: none) {
  -webkit-touch-callout: $value;
}
/*touch-callout End*/

/*transformation Start*/
// Transformation Mixins
// --------------------------------------------------

@mixin rotate($degrees) {
  @include transform( rotate($degrees) );
}
@mixin scale($ratio) {
  @include transform( scale($ratio) );
}
@mixin translate($x, $y) {
  @include transform( translate($x, $y) );
}
@mixin skew($x, $y) {
  @include transform( skew($x, $y) );
  -webkit-backface-visibility: hidden;
}
@mixin translate3d($x, $y, $z) {
  @include transform( translate3d($x, $y, $z) );
}
@mixin translateZ($z) {
  @include transform( translateZ($z) );
}
@mixin transform($val) {
  -webkit-transform: $val;
          transform: $val;
}

@mixin transform-origin($left, $top) {
  -webkit-transform-origin: $left $top;
          transform-origin: $left $top;
}
/*transformation End*/

/*transition Start*/
@mixin transition($transition...) {
  -webkit-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($transition-timing) {
   -webkit-transition-timing-function: $transition-timing;
           transition-timing-function: $transition-timing;
 }
 @mixin transition-property($property) {
  -webkit-transition-property: $property;
          transition-property: $property;
}
@mixin transition-transform($properties...) {
  // special case cuz of transform vendor prefixes
  -webkit-transition: -webkit-transform $properties;
          transition: transform $properties;
}
/*transition End*/

/**
 * @desc  triangle
 * @param $width
 * @param $height
 * @param $color
 * @param $direction: top bottom left right
 */
@mixin triangle($width, $height, $color: #000, $direction: bottom) {
    $map-direction: (
        top: bottom left right,
        bottom: top left right,
        left: right top bottom,
        right: left top bottom
    );
    @if not map-has-key($map-direction, $direction) {
        @error "triangle $direction Must be:#{map-keys($map-direction)}";
    }
    $conf: map-get($map-direction, $direction);
    $width: $width/2;

    height: 0;
    width: 0;
    border-#{nth($conf, 1)}: $height solid $color;
    border-#{nth($conf, 2)}: $width solid transparent;
    border-#{nth($conf, 3)}: $width solid transparent;
}


/**
 * @desc Use svg
 */
@mixin svg-triangle($width, $height, $color: #000, $direction: bottom) {
    $map-direction: (
        top: 0,
        bottom: 180 strip-unit($width) strip-unit($height),
        left: -90 strip-unit($height) strip-unit($height),
        right: 90 strip-unit($width) strip-unit($width)
    );
    @if not map-has-key($map-direction, $direction) {
        @error "svg-triangle $direction 必须为：#{map-keys($map-direction)}";
    }
    $degrees: map-get($map-direction, $direction);

    width: $width;
    height: $height;
    background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http://www.w3.org/2000/svg%22%20width%3D%22#{$width * 2}%22%20height%3D%22#{$height * 2}%22%3E%3Cpath%20fill%3D%22#{$color}%22%20transform%3D%22rotate(#{$degrees})%22%20d%3D%22M2.658,0.000%20C-13.615,0.000%2050.938,0.000%2034.662,0.000%20C28.662,0.000%2023.035,12.002%2018.660,12.002%20C14.285,12.002%208.594,0.000%202.658,0.000%20Z%22/%3E%3C/svg%3E');
    background-repeat: no-repeat;
    background-size: 100% auto;
}

/*user-select Start*/
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
          user-select: $select;
}
/*user-select End*/

/*width Start*/
@mixin w1($num){
  width: percentage(1/$num);
}
/*width End*/
